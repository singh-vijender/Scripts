config.cfg
#K8SOLD1:OLD_FFDC:host29035:/home/enabler/.kube/admin.conf:
K8SNEW1:FF_set_1:host39195:/home/enabler/.kube/admin.conf:
K8SNEW1:FF_Set_2:host39423:/home/enabler/.kube/admin.conf:
#K8SOLD1:OLD_ALDC:host04006:/home/enabler/.kube/admin.conf_local:
K8SNEW1:AL_Set_1:host38911:/home/enabler/.kube/admin.conf:
K8SNEW1:AL_Set_2:host40245:/home/enabler/.kube/admin.conf:
#K8SOLD1:OLD_DLDC:host39378:/home/enabler/.kube/admin.conf:
K8SNEW1:DL_Set_1:host10990:/home/enabler/.kube/admin.conf:
K8SNEW1:DL_Set_2:host10282:/home/enabler/.kube/admin.conf:

MEM_PERC:95
CPU_PERC:98

HTML_LOC:/opt/httpserver/htdocs/POD_CPU_MEM

ONLY:NAMESPACE:com-company-idp:

EXCLUDE:NAMESPACE:kube-system:
EXCLUDE:LIST:com-company-elkpaas:
EXCLUDE:NAMESPACE:com-company-ocnp-mgmt:
EXCLUDE:LIST:kube-system:
EXCLUDE:LIST:com-company-ocnp-mgm:
EXCLUDE:LIST:com-company-roster-prod:
EXCLUDE:LIST:com-company-cpfmon:
EXCLUDE:LIST:catalogms:
EXCLUDE:LIST:certman-ingress:
EXCLUDE:LIST:deployment-demo:
EXCLUDE:LIST:edsatgms2:
EXCLUDE:LIST:edsatgms3:
EXCLUDE:LIST:edsatgms4:
EXCLUDE:LIST:minio:
EXCLUDE:LIST:cfgmapchecker:
EXCLUDE:LIST:dynatrace-oneagent-operator:
EXCLUDE:LIST:jaeger-collector:
EXCLUDE:LIST:jaeger-query:
EXCLUDE:LIST:sentry-postgresql:
EXCLUDE:LIST:sentry-redis:
EXCLUDE:LIST:sentry-sentry-cron:
EXCLUDE:LIST:sentry-sentry-web:
EXCLUDE:LIST:sentry-sentry-worker:


NEEDMAIL:true:
#MAILFROM:DL@company.com:
MAILFROM:DL-alerts@company.com
MAILLIST:DL@company.com
MAILSUB:[MONITOR] IDP PODS CPU and MEMORY check:


Main.sh

#!/bin/bash
LOC=`dirname $0`
CONF=${LOC}/config.cfg

${LOC}/1*sh
${LOC}/2*sh
${LOC}/3*sh
${LOC}/4*sh
cp  final_dump.txt ../TEMP_CPU_REPORT/
${LOC}/5*sh
sleep 2
${LOC}/6*.sh
${LOC}/7*.sh


1_data_collection_formate.sh

#!/bin/bash
LOC=`dirname $0`
CONF=${LOC}/config.cfg

EXCLUDE=${LOC}/EXCLUDE.txt

grep ^EXCLUDE ${CONF} | cut -d':' -f 3 > $EXCLUDE

HTML_HOME=`grep ^HTML_LOC ${CONF} | cut -d':' -f 2 `
mkdir -p $HTML_HOME 2>/dev/null
APH_HOME=`basename $HTML_HOME`

cat /dev/null > ${LOC}/raw_dump.txt
cat /dev/null > ${LOC}/raw_dep_dump.txt
######## DATA COLLECTION each CLUSTER #############
for line in `grep ^K8S ${CONF}`
do
  DC=`echo $line |cut -d':' -f2`
  SERVER=`echo $line |cut -d':' -f3`
  ADMINCONF=`echo $line |cut -d':' -f4`

  ### command to pull deployment data
  PODCMD="export PATH=/usr/local/bin:\$PATH; export KUBECONFIG=${ADMINCONF}; kubectl top po --all-namespaces --no-headers"
  DEPCMD="export PATH=/usr/local/bin:\$PATH; export KUBECONFIG=${ADMINCONF}; kubectl get deployment --all-namespaces -o custom-columns=NAME:.metadata.name,MEMLIMIT:.spec.template.spec.containers[0].resources.limits.memory,CPULIMIT:.spec.template.spec.containers[0].resources.limits.cpu,REPLICAS:.spec.replicas"
  ### pulling data
  /usr/local/bin/sshcmd -u enabler -s $SERVER -q "$PODCMD" |  fgrep -w -v -f $EXCLUDE | tr -s " " | tr ' ' '|' | sed 's/|$//g' >  ${LOC}/${SERVER}_pod_temp.txt
  /usr/local/bin/sshcmd -u enabler -s $SERVER -q "$DEPCMD" |  fgrep -w -v -f $EXCLUDE | tr -s " " | tr ' ' '|' | sed 's/|$//g' >  ${LOC}/${SERVER}_dep_temp.txt

  while read tmpln
  do
    echo "${DC}|${tmpln}" >> ${LOC}/raw_dump.txt
  done < ${LOC}/${SERVER}_pod_temp.txt
  rm ${LOC}/${SERVER}_pod_temp.txt

  while read tmpln
  do
    echo "${DC}|${tmpln}" >> ${LOC}/raw_dep_dump.txt
  done < ${LOC}/${SERVER}_dep_temp.txt
  rm ${LOC}/${SERVER}_dep_temp.txt

done

cat ${LOC}/raw_dump.txt | fgrep -v -f ${LOC}/EXCLUDE.txt > ${LOC}/filtered_dump.txt

rm ${LOC}/raw_dump.txt ${LOC}/EXCLUDE.txt


2_DEP_converver.sh


#!/bin/bash
LOC=`dirname $0`
CONF=${LOC}/config.cfg

cat /dev/null > ${LOC}/deployment_converted_dump.txt

while read dep
do
  DC=`echo ${dep} | cut -d'|' -f1 `
  MS=`echo ${dep} | cut -d'|' -f2`
  MEM=`echo ${dep} | cut -d'|' -f3 `
  CPU=`echo ${dep} | cut -d'|' -f4 `
  REPLICA=`echo ${dep} | cut -d'|' -f5 `

  #converting Memory
  if [[ $MEM =~ ^[0-9]+Gi$ ]];then
    NUM=`echo $MEM | sed 's/Gi//g'`
    MEM=$(( NUM * 1024 ))
  elif [[ $MEM =~ ^[0-9]+Mi$ ]];then
    MEM=`echo $MEM | sed 's/Mi//g'`
  elif [ "X<none>" == "X${MEM}" ]; then
    MEM="NA"
  fi

  #converting CPU
  if [[ $CPU =~ ^[0-9]+m$ ]];then
    CPU=`echo $CPU | sed 's/m//g' `
  elif [[ $CPU =~ ^[0-9]+$ ]];then
    CPU=$(( CPU * 1000 ))
  elif [ "X<none>" == "X${CPU}" ];then
    CPU="NA"
  elif [[ $CPU =~ ^[0-9]+Gi$ ]];then
    CPU="NA"
  fi

  echo "${DC}|${MS}|${MEM}|${CPU}|${REPLICA}" >> ${LOC}/deployment_converted_dump.txt
done < ${LOC}/raw_dep_dump.txt
rm ${LOC}/raw_dep_dump.txt


3_POD_converter.sh
#!/bin/bash
LOC=`dirname $0`
CONF=${LOC}/config.cfg

cat /dev/null > ${LOC}/POD_converted_dump.txt

while read dep
do
  DC=`echo ${dep} | cut -d'|' -f1 `
  NS=`echo ${dep} | cut -d'|' -f2`
  POD=`echo ${dep} | cut -d'|' -f3`
  MEM=`echo ${dep} | cut -d'|' -f5 `
  CPU=`echo ${dep} | cut -d'|' -f4 `

  #converting Memory
  if [[ $MEM =~ ^[0-9]+Gi$ ]];then
    NUM=`echo $MEM | sed 's/Gi//g'`
    MEM=$(( NUM * 1024 ))
  elif [[ $MEM =~ ^[0-9]+Mi$ ]];then
    MEM=`echo $MEM | sed 's/Mi//g'`
  elif [ "X<none>" == "X${MEM}" ]; then
    MEM="NA"
  fi

  #converting CPU
  if [[ $CPU =~ ^[0-9]+m$ ]];then
    CPU=`echo $CPU | sed 's/m//g' `
  elif [[ $CPU =~ ^[0-9]+$ ]];then
    CPU=$(( CPU * 1000 ))
  elif [ "X<none>" == "X${CPU}" ];then
    CPU="NA"
  elif [[ $CPU =~ ^[0-9]+Gi$ ]];then
    CPU="NA"
  fi

  # make deployment column
  DEPL=`echo $POD | rev | cut -d'-' -f3- | rev`

  echo "${DC}|${NS}|${DEPL}|${POD}|${CPU}|${MEM}" >> ${LOC}/POD_converted_dump.txt
done < ${LOC}/filtered_dump.txt
rm ${LOC}/filtered_dump.txt



4_calculate.sh
#!/bin/bash
LOC=`dirname $0`
CONF=${LOC}/config.cfg

cat /dev/null > ${LOC}/final_dump.txt
cat /dev/null > ${LOC}/nocalcuated.log
while read ln
do
  LOOK="`echo $ln | awk -F'|' 'BEGIN{OFS=\"|\"} {print $1,$3}'`|"
  COUNT=`grep "$LOOK" ${LOC}/deployment_converted_dump.txt| wc -l`
  FOUND=`grep "$LOOK" ${LOC}/deployment_converted_dump.txt`

  MEMUSED=`echo $ln | cut -d'|' -f5`
  CPUUSED=`echo $ln | cut -d'|' -f5`
  MEMLIM=`echo $FOUND | cut -d'|' -f3`
  CPULIM=`echo $FOUND | cut -d'|' -f4`
  #echo $ln
  if [ $COUNT -eq 1 ];then

    MEMUSED=`echo $ln | cut -d'|' -f6`
    CPUUSED=`echo $ln | cut -d'|' -f5 `
    MEMLIM=`echo $FOUND | cut -d'|' -f3 `
    CPULIM=`echo $FOUND | cut -d'|' -f4 `

    #echo "$MEMUSED $CPUUSED $MEMLIM $CPULIM"
    if [ "X${MEMLIM}" == "XNA" ]; then
      MEMPERC="NOLIMIT"
    else
      MEMPERC=$((MEMUSED*100/MEMLIM)) 2>/dev/null
    fi

    if [ "X${CPULIM}" == "XNA" ]; then
      CPUPERC="NOLIMIT"
    else
      CPUPERC=$(( CPUUSED*100/CPULIM )) 2>/dev/null
    fi

    echo "${ln}|${MEMLIM}|${CPULIM}|${MEMPERC}|${CPUPERC}" >> ${LOC}/final_dump.txt
    #echo "${ln}|${MEMPERC}|${CPUPERC}"
  else
    echo "NOT PROCESSED : |$ln" >> ${LOC}/nocalcuated.log
  fi

done < POD_converted_dump.txt



5_report_generator.sh
#!/bin/bash
LOC=`dirname $0`
CONF=${LOC}/config.cfg

MEMP=`grep ^MEM_PERC $CONF | cut -d':' -f2`
CPUP=`grep ^CPU_PERC $CONF | cut -d':' -f2`

BGC="B0B0B0"

cat /dev/null > ${LOC}/FINAL1.txt
cat /dev/null > ${LOC}/ALERT1.txt
cat /dev/null > ${LOC}/NOLIMIT.txt
while read hml
do
  MEMT=`echo $hml | cut -d'|' -f10`
  CPUT=`echo $hml | cut -d'|' -f9`

  if [ "X${MEMT}" == "XNOLIMIT" ] || [ "X${CPUT}" == "XNOLIMIT" ];then
    LINE=`echo $hml | sed 's:|:</td><td>:g'`
    echo "<tr bgcolor=F0F8FF><td>$LINE</td></tr>" >> ${LOC}/NOLIMIT.txt
  else
    LINE=`echo $hml | sed 's:|:</td><td>:g'`
    if [ $MEMT -gt $MEMP ] && [ $CPUT -gt $CPUP ];then
      echo "<tr bgcolor=red><td>$LINE</td></tr>" >> ${LOC}/ALERT1.txt
    elif [ $MEMT -gt $MEMP ] || [ $CPUT -gt $CPUP ];then
      echo "<tr bgcolor=FF6347><td>$LINE</td></tr>" >> ${LOC}/ALERT1.txt
    else
      echo "<tr bgcolor="$BGC"><td>$LINE</td></tr>" >> ${LOC}/FINAL1.txt
    fi
  fi

  if [ "$BGC" == "B0B0B0" ];then
    BGC="F0F0F0"
  else
    BGC="B0B0B0"
  fi
done < ${LOC}/final_dump.txt

echo "<h3>CPU % Threshold for alert:[$CPUP] --- MEM % Threshold for alert:[$MEMP]</h3>" > ${LOC}/RESULT.html
date >> ${LOC}/RESULT.html
echo "<table border=1>" >> ${LOC}/RESULT.html
echo "<tr><th>DC</th><th>NAMESPACE</th><th>Deployment</th><th>POD</th><th>CPUused</th><th>MEMused</th><th>MEMlimit</th><th>CPUlimit</th><th>MEM%</th><th>CPU%</th></tr>" >> ${LOC}/RESULT.html
cat ${LOC}/ALERT1.txt >> ${LOC}/RESULT.html
cat ${LOC}/FINAL1.txt >> ${LOC}/RESULT.html
cat ${LOC}/NOLIMIT.txt >> ${LOC}/RESULT.html
echo "</table>" >> ${LOC}/RESULT.html

cp ${LOC}/RESULT.html /opt/app/workload/httpserver/htdocs/POD_CPU_MEM/


6_MAIL.sh
#!/bin/bash
LOC=`dirname $0`
CONF=${LOC}/config.cfg

MEMP=`grep ^MEM_PERC $CONF | cut -d':' -f2`
CPUP=`grep ^CPU_PERC $CONF | cut -d':' -f2`

echo "<h2>CPU % Threshold for alert:[$CPUP] --- MEM % Threshold for alert:[$MEMP]</h2>" > ${LOC}/MAIL_ALERT.html
echo "<table border=1>" >> ${LOC}/MAIL_ALERT.html
echo "<tr><th>DC</th><th>NAMESPACE</th><th>Deployment</th><th>POD</th><th>CPUused</th><th>MEMused</th><th>MEMlimit</th><th>CPUlimit</th><th>MEM%</th><th>CPU%</th></tr>" >> ${LOC}/MAIL_ALERT.html
cat ${LOC}/ALERT1.txt >> ${LOC}/MAIL_ALERT.html
echo "</table>" >> ${LOC}/MAIL_ALERT.html

MAILNEED=`grep ^NEEDMAIL ${CONF} | cut -d':' -f 2 `
MAILLIST=`grep ^MAILLIST ${CONF} | cut -d':' -f 2 `
MAILSUB=`grep ^MAILSUB ${CONF} | cut -d':' -f 2 `
FMAIL=`grep ^MAILFROM ${CONF} | cut -d':' -f 2 `



if [ "X${MAILNEED}" == "Xtrue" ];then
if [ `cat ${LOC}/ALERT1.txt | wc -l` -gt 0 ];then
(
echo "From: $FMAIL "
echo "To: $MAILLIST "
echo "MIME-Version: 1.0"
echo "Subject: $MAILSUB"
echo "Content-Type: text/html"
cat ${LOC}/MAIL_ALERT.html
) | /usr/sbin/sendmail -t
echo "sending mail to $MAILLIST from $FMAIL at `date +%H%M`" >> ${LOC}/log
else
 echo "There is nothing to send in the email at `date +%Y%m%d_%H%M`" >>${LOC}/happymsg
fi
fi



7_Cleanup.sh
#!/bin/bash
LOC=`dirname $0`
CONF=${LOC}/config.cfg

rm *txt *html
